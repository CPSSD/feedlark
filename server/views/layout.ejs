<!DOCTYPE html>
<html>
	<head>
		<title>Feedlark</title>

		<!-- Viewport mobile tag for sensible mobile support -->
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
		<link href="http://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

		<!--
				Stylesheets and Preprocessors
				==============================

				You can always bring in CSS files manually with `<link>` tags, or asynchronously
				using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
				of Sails' conventional asset pipeline (boilerplate Gruntfile).

				By default, stylesheets from your `assets/styles` folder are included
				here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
				are supported. In production, your styles will be minified and concatenated into
				a single file.

				To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
				For example, here are a few things you could do:

						+ Change the order of your CSS files
						+ Import stylesheets from other directories
						+ Use a different or additional preprocessor, like SASS, SCSS or Stylus
		-->

		<!--STYLES-->
		<link rel="stylesheet" href="/styles/importer.css">
		<!--STYLES END-->
	</head>

	<body>
		<nav>
			<div class="nav-wrapper light-blue">
				<a href="/" class="brand-logo">Feedlark</a>
				<a href="#" data-activates="mobile-demo" class="button-collapse"><i class="material-icons">menu</i></a>

				 <ul id="nav-mobile" class="right hide-on-med-and-down">
					<% if (typeof req.session.username != "undefined") { %>
					<li>
						<a class="dropdown-button" href="#!" data-activates="dropdown1"><%= req.session.username %><i class="material-icons right">arrow_drop_down</i></a>
						<ul id="dropdown1" class="dropdown-content">
							<li><a href="/user/profile">Profile</a></li>
							<li><a href="/feed/manage">My Feeds</a></li>
							<li class="divider"></li>
							<li><a href="/user/logout">Logout</a></li>
						</ul>
					</li>
					<% } else { %>
					<li><a href="/user/login">Login</a></li>
					<% } %>
				 </ul>
				 <ul class="side-nav" id="mobile-demo">
					<% if (typeof req.session.username != "undefined") { %>
					<li style="color: black;">Hello <%= req.session.username %></li>
					<li><a href="/user/profile">Profile</a></li>
					<li><a href="/feed/manage">My Feeds</a></li>
					<li class="divider"></li>
					<li><a href="/user/logout">Logout</a></li>
					<% } else { %>
					<li><a href="/user/login">Login</a></li>
					<% } %>
				</ul>

			</div>
		</nav>
		<% if (typeof data != "undefined" && typeof data.err != "undefined") { %>
		<!-- Error message display -->
		<div class="row">
			<div class="col s12 m6">
				<div class="card red darken-1">
					<div class="card-content white-text">
						<span class="card-title">Warning</span>
						<p><%= data.err %></p>
					</div>
				</div>
			</div>
		</div>
		<%
			data.err = undefined;
		}
		%>

		<%- body %>

		<!--
				Client-side Templates
				========================

				HTML templates are important prerequisites of modern, rich client applications.
				To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
				that you load these templates client-side.

				By default, your Gruntfile is configured to automatically load and precompile
				client-side JST templates in your `assets/templates` folder, then
				include them here automatically (between TEMPLATES and TEMPLATES END).

				To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
				For example, here are a few things you could do:

						+ Import templates from other directories
						+ Use a different template engine (handlebars, jade, dust, etc.)
						+ Internationalize your client-side templates using a server-side
							stringfile before they're served.
		-->

		<!--TEMPLATES-->
		
		<!--TEMPLATES END-->


		<!--

			Client-side Javascript
			========================

			You can always bring in JS files manually with `script` tags, or asynchronously
			on the client using a solution like AMD (RequireJS).  Or, if you like, you can
			take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

			By default, files in your `assets/js` folder are included here
			automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
			CoffeeScript (.coffee) are supported. In production, your scripts will be minified
			and concatenated into a single file.

			To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
			For example, here are a few things you could do:

					+ Change the order of your scripts
					+ Import scripts from other directories
					+ Use a different preprocessor, like TypeScript

		-->


		<!--SCRIPTS-->
		<script src="/js/dependencies/sails.io.js"></script>
		<script src="/js/dependencies/jquery/jquery-2.2.0.min.js"></script>
		<script src="/js/dependencies/materialize/materialize.min.js"></script>
		<script src="/js/main.js"></script>
		<!--SCRIPTS END-->
		<% if (typeof req.session.msg != "undefined") { %>
		<!-- Toast display -->
		<script type="text/javascript">
			$(document).ready(function() {
				Materialize.toast("<%= req.session.msg %>", 5000);
			});
		</script>
		<%
			req.session.msg = undefined;
		}
		%>
	</body>
</html>
